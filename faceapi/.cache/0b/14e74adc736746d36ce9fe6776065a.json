{"id":"../node_modules/kalmanjs/lib/kalman.js","dependencies":[{"name":"/Users/lucasdeavilamartins/ff/faceapi/node_modules/kalmanjs/lib/kalman.js.map","includedInParent":true,"mtime":1576525796774},{"name":"/Users/lucasdeavilamartins/ff/faceapi/package.json","includedInParent":true,"mtime":1576529062588},{"name":"/Users/lucasdeavilamartins/ff/faceapi/node_modules/kalmanjs/package.json","includedInParent":true,"mtime":1576525796774}],"generated":{"js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015-2018 Wouter Bulten\n* @license MIT License\n* @preserve\n*/\nvar KalmanFilter =\n/*#__PURE__*/\nfunction () {\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  function KalmanFilter() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$R = _ref.R,\n        R = _ref$R === void 0 ? 1 : _ref$R,\n        _ref$Q = _ref.Q,\n        Q = _ref$Q === void 0 ? 1 : _ref$Q,\n        _ref$A = _ref.A,\n        A = _ref$A === void 0 ? 1 : _ref$A,\n        _ref$B = _ref.B,\n        B = _ref$B === void 0 ? 0 : _ref$B,\n        _ref$C = _ref.C,\n        C = _ref$C === void 0 ? 1 : _ref$C;\n\n    _classCallCheck(this, KalmanFilter);\n\n    this.R = R; // noise power desirable\n\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n\n\n  _createClass(KalmanFilter, [{\n    key: \"filter\",\n    value: function filter(z) {\n      var u = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (isNaN(this.x)) {\n        this.x = 1 / this.C * z;\n        this.cov = 1 / this.C * this.Q * (1 / this.C);\n      } else {\n        // Compute prediction\n        var predX = this.predict(u);\n        var predCov = this.uncertainty(); // Kalman gain\n\n        var K = predCov * this.C * (1 / (this.C * predCov * this.C + this.Q)); // Correction\n\n        this.x = predX + K * (z - this.C * predX);\n        this.cov = predCov - K * this.C * predCov;\n      }\n\n      return this.x;\n    }\n    /**\n    * Predict next value\n    * @param  {Number} [u] Control\n    * @return {Number}\n    */\n\n  }, {\n    key: \"predict\",\n    value: function predict() {\n      var u = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.A * this.x + this.B * u;\n    }\n    /**\n    * Return uncertainty of filter\n    * @return {Number}\n    */\n\n  }, {\n    key: \"uncertainty\",\n    value: function uncertainty() {\n      return this.A * this.cov * this.A + this.R;\n    }\n    /**\n    * Return the last filtered measurement\n    * @return {Number}\n    */\n\n  }, {\n    key: \"lastMeasurement\",\n    value: function lastMeasurement() {\n      return this.x;\n    }\n    /**\n    * Set measurement noise Q\n    * @param {Number} noise\n    */\n\n  }, {\n    key: \"setMeasurementNoise\",\n    value: function setMeasurementNoise(noise) {\n      this.Q = noise;\n    }\n    /**\n    * Set the process noise R\n    * @param {Number} noise\n    */\n\n  }, {\n    key: \"setProcessNoise\",\n    value: function setProcessNoise(noise) {\n      this.R = noise;\n    }\n  }]);\n\n  return KalmanFilter;\n}();\n\nmodule.exports = KalmanFilter;\n\n"},"sourceMaps":{"js":{"version":3,"file":"kalman.js","sources":["../src/kalman.js"],"sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015-2018 Wouter Bulten\n* @license MIT License\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = this.predict(u);\n      const predCov = this.uncertainty();\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Predict next value\n  * @param  {Number} [u] Control\n  * @return {Number}\n  */\n  predict(u = 0) {\n    return (this.A * this.x) + (this.B * u);\n  }\n  \n  /**\n  * Return uncertainty of filter\n  * @return {Number}\n  */\n  uncertainty() {\n    return ((this.A * this.cov) * this.A) + this.R;\n  }\n  \n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n"],"names":["KalmanFilter","R","Q","A","B","C","cov","NaN","x","z","u","isNaN","predX","predict","predCov","uncertainty","K","noise"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;IAUqBA;;;;;;;;;;;;0BAWmC;mFAAJ,EAAI;sBAAzCC,CAAyC;QAAzCA,CAAyC,uBAArC,CAAqC;sBAAlCC,CAAkC;QAAlCA,CAAkC,uBAA9B,CAA8B;sBAA3BC,CAA2B;QAA3BA,CAA2B,uBAAvB,CAAuB;sBAApBC,CAAoB;QAApBA,CAAoB,uBAAhB,CAAgB;sBAAbC,CAAa;QAAbA,CAAa,uBAAT,CAAS;;;;SAE/CJ,CAAL,GAASA,CAAT,CAFoD;;SAG/CC,CAAL,GAASA,CAAT,CAHoD;;SAK/CC,CAAL,GAASA,CAAT;SACKE,CAAL,GAASA,CAAT;SACKD,CAAL,GAASA,CAAT;SACKE,GAAL,GAAWC,GAAX;SACKC,CAAL,GAASD,GAAT,CAToD;;;;;;;;;;;;2BAkB/CE,GAAU;UAAPC,CAAO,uEAAH,CAAG;;UAEXC,KAAK,CAAC,KAAKH,CAAN,CAAT,EAAmB;aACZA,CAAL,GAAU,IAAI,KAAKH,CAAV,GAAeI,CAAxB;aACKH,GAAL,GAAY,IAAI,KAAKD,CAAV,GAAe,KAAKH,CAApB,IAAyB,IAAI,KAAKG,CAAlC,CAAX;OAFF,MAIK;;YAGGO,KAAK,GAAG,KAAKC,OAAL,CAAaH,CAAb,CAAd;YACMI,OAAO,GAAG,KAAKC,WAAL,EAAhB,CAJG;;YAOGC,CAAC,GAAGF,OAAO,GAAG,KAAKT,CAAf,IAAoB,KAAM,KAAKA,CAAL,GAASS,OAAT,GAAmB,KAAKT,CAAzB,GAA8B,KAAKH,CAAxC,CAApB,CAAV,CAPG;;aAUEM,CAAL,GAASI,KAAK,GAAGI,CAAC,IAAIP,CAAC,GAAI,KAAKJ,CAAL,GAASO,KAAlB,CAAlB;aACKN,GAAL,GAAWQ,OAAO,GAAIE,CAAC,GAAG,KAAKX,CAAT,GAAaS,OAAnC;;;aAGK,KAAKN,CAAZ;;;;;;;;;;8BAQa;UAAPE,CAAO,uEAAH,CAAG;aACL,KAAKP,CAAL,GAAS,KAAKK,CAAf,GAAqB,KAAKJ,CAAL,GAASM,CAArC;;;;;;;;;kCAOY;aACH,KAAKP,CAAL,GAAS,KAAKG,GAAf,GAAsB,KAAKH,CAA5B,GAAiC,KAAKF,CAA7C;;;;;;;;;sCAOgB;aACT,KAAKO,CAAZ;;;;;;;;;wCAOkBS,OAAO;WACpBf,CAAL,GAASe,KAAT;;;;;;;;;oCAOcA,OAAO;WAChBhB,CAAL,GAASgB,KAAT;;;;;;;;;"}},"error":null,"hash":"4910ef3425bd59d3ab9bc36de82095a3","cacheData":{"env":{}}}